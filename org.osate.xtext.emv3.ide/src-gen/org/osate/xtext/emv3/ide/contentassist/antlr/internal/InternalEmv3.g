/*
 * generated by Xtext 2.16.0
 */
grammar InternalEmv3;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.osate.xtext.emv3.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.osate.xtext.emv3.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.osate.xtext.emv3.services.Emv3GrammarAccess;

}
@parser::members {
	private Emv3GrammarAccess grammarAccess;

	public void setGrammarAccess(Emv3GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRulePackageEMV3
entryRulePackageEMV3
:
{ before(grammarAccess.getPackageEMV3Rule()); }
	 rulePackageEMV3
{ after(grammarAccess.getPackageEMV3Rule()); } 
	 EOF 
;

// Rule PackageEMV3
rulePackageEMV3 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPackageEMV3Access().getGroup()); }
		(rule__PackageEMV3__Group__0)
		{ after(grammarAccess.getPackageEMV3Access().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleErrorType
entryRuleErrorType
:
{ before(grammarAccess.getErrorTypeRule()); }
	 ruleErrorType
{ after(grammarAccess.getErrorTypeRule()); } 
	 EOF 
;

// Rule ErrorType
ruleErrorType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getErrorTypeAccess().getGroup()); }
		(rule__ErrorType__Group__0)
		{ after(grammarAccess.getErrorTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSubclause
entryRuleSubclause
:
{ before(grammarAccess.getSubclauseRule()); }
	 ruleSubclause
{ after(grammarAccess.getSubclauseRule()); } 
	 EOF 
;

// Rule Subclause
ruleSubclause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSubclauseAccess().getGroup()); }
		(rule__Subclause__Group__0)
		{ after(grammarAccess.getSubclauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleErrorPropagation
entryRuleErrorPropagation
:
{ before(grammarAccess.getErrorPropagationRule()); }
	 ruleErrorPropagation
{ after(grammarAccess.getErrorPropagationRule()); } 
	 EOF 
;

// Rule ErrorPropagation
ruleErrorPropagation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getErrorPropagationAccess().getGroup()); }
		(rule__ErrorPropagation__Group__0)
		{ after(grammarAccess.getErrorPropagationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
		(rule__QualifiedName__Group__0)
		{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClassifierName
entryRuleClassifierName
:
{ before(grammarAccess.getClassifierNameRule()); }
	 ruleClassifierName
{ after(grammarAccess.getClassifierNameRule()); } 
	 EOF 
;

// Rule ClassifierName
ruleClassifierName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClassifierNameAccess().getGroup()); }
		(rule__ClassifierName__Group__0)
		{ after(grammarAccess.getClassifierNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageEMV3__Alternatives_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		(
			{ before(grammarAccess.getPackageEMV3Access().getElementsAssignment_3_0()); }
			(rule__PackageEMV3__ElementsAssignment_3_0)
			{ after(grammarAccess.getPackageEMV3Access().getElementsAssignment_3_0()); }
		)
		(
			{ before(grammarAccess.getPackageEMV3Access().getElementsAssignment_3_0()); }
			(rule__PackageEMV3__ElementsAssignment_3_0)*
			{ after(grammarAccess.getPackageEMV3Access().getElementsAssignment_3_0()); }
		)
	)
	|
	(
		(
			{ before(grammarAccess.getPackageEMV3Access().getElementsAssignment_3_1()); }
			(rule__PackageEMV3__ElementsAssignment_3_1)
			{ after(grammarAccess.getPackageEMV3Access().getElementsAssignment_3_1()); }
		)
		(
			{ before(grammarAccess.getPackageEMV3Access().getElementsAssignment_3_1()); }
			(rule__PackageEMV3__ElementsAssignment_3_1)*
			{ after(grammarAccess.getPackageEMV3Access().getElementsAssignment_3_1()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageEMV3__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PackageEMV3__Group__0__Impl
	rule__PackageEMV3__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageEMV3__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPackageEMV3Access().getPackageKeyword_0()); }
	'package'
	{ after(grammarAccess.getPackageEMV3Access().getPackageKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageEMV3__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PackageEMV3__Group__1__Impl
	rule__PackageEMV3__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageEMV3__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPackageEMV3Access().getNameAssignment_1()); }
	(rule__PackageEMV3__NameAssignment_1)
	{ after(grammarAccess.getPackageEMV3Access().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageEMV3__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PackageEMV3__Group__2__Impl
	rule__PackageEMV3__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageEMV3__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPackageEMV3Access().getEmv3Keyword_2()); }
	'emv3'
	{ after(grammarAccess.getPackageEMV3Access().getEmv3Keyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageEMV3__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PackageEMV3__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageEMV3__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPackageEMV3Access().getAlternatives_3()); }
	(rule__PackageEMV3__Alternatives_3)
	{ after(grammarAccess.getPackageEMV3Access().getAlternatives_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ErrorType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ErrorType__Group__0__Impl
	rule__ErrorType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getErrorTypeAccess().getErrorTypeAction_0()); }
	()
	{ after(grammarAccess.getErrorTypeAccess().getErrorTypeAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ErrorType__Group__1__Impl
	rule__ErrorType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getErrorTypeAccess().getTypeKeyword_1()); }
	'Type'
	{ after(grammarAccess.getErrorTypeAccess().getTypeKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorType__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ErrorType__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorType__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getErrorTypeAccess().getNameAssignment_2()); }
	(rule__ErrorType__NameAssignment_2)
	{ after(grammarAccess.getErrorTypeAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Subclause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Subclause__Group__0__Impl
	rule__Subclause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Subclause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubclauseAccess().getEmv3SubclauseAction_0()); }
	()
	{ after(grammarAccess.getSubclauseAccess().getEmv3SubclauseAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Subclause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Subclause__Group__1__Impl
	rule__Subclause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Subclause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubclauseAccess().getForKeyword_1()); }
	'for'
	{ after(grammarAccess.getSubclauseAccess().getForKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Subclause__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Subclause__Group__2__Impl
	rule__Subclause__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Subclause__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubclauseAccess().getNameAssignment_2()); }
	(rule__Subclause__NameAssignment_2)
	{ after(grammarAccess.getSubclauseAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Subclause__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Subclause__Group__3__Impl
	rule__Subclause__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Subclause__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubclauseAccess().getLeftCurlyBracketKeyword_3()); }
	'{'
	{ after(grammarAccess.getSubclauseAccess().getLeftCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Subclause__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Subclause__Group__4__Impl
	rule__Subclause__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Subclause__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubclauseAccess().getEmv3statementAssignment_4()); }
	(rule__Subclause__Emv3statementAssignment_4)
	{ after(grammarAccess.getSubclauseAccess().getEmv3statementAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Subclause__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Subclause__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Subclause__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubclauseAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getSubclauseAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ErrorPropagation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ErrorPropagation__Group__0__Impl
	rule__ErrorPropagation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorPropagation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getErrorPropagationAccess().getNameAssignment_0()); }
	(rule__ErrorPropagation__NameAssignment_0)
	{ after(grammarAccess.getErrorPropagationAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorPropagation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ErrorPropagation__Group__1__Impl
	rule__ErrorPropagation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorPropagation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getErrorPropagationAccess().getPropagationKeyword_1()); }
	'propagation'
	{ after(grammarAccess.getErrorPropagationAccess().getPropagationKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorPropagation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ErrorPropagation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorPropagation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getErrorPropagationAccess().getTypeAssignment_2()); }
	(rule__ErrorPropagation__TypeAssignment_2)
	{ after(grammarAccess.getErrorPropagationAccess().getTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
	{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
	(rule__QualifiedName__Group_1__0)*
	{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getColonColonKeyword_1_0()); }
	'::'
	{ after(grammarAccess.getQualifiedNameAccess().getColonColonKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
	{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ClassifierName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassifierName__Group__0__Impl
	rule__ClassifierName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassifierName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassifierNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
	{ after(grammarAccess.getClassifierNameAccess().getIDTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassifierName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassifierName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassifierName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassifierNameAccess().getGroup_1()); }
	(rule__ClassifierName__Group_1__0)?
	{ after(grammarAccess.getClassifierNameAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ClassifierName__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassifierName__Group_1__0__Impl
	rule__ClassifierName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassifierName__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassifierNameAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getClassifierNameAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassifierName__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassifierName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassifierName__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassifierNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
	{ after(grammarAccess.getClassifierNameAccess().getIDTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PackageEMV3__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPackageEMV3Access().getNameQualifiedNameParserRuleCall_1_0()); }
		ruleQualifiedName
		{ after(grammarAccess.getPackageEMV3Access().getNameQualifiedNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageEMV3__ElementsAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPackageEMV3Access().getElementsSubclauseParserRuleCall_3_0_0()); }
		ruleSubclause
		{ after(grammarAccess.getPackageEMV3Access().getElementsSubclauseParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageEMV3__ElementsAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPackageEMV3Access().getElementsErrorTypeParserRuleCall_3_1_0()); }
		ruleErrorType
		{ after(grammarAccess.getPackageEMV3Access().getElementsErrorTypeParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorType__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getErrorTypeAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getErrorTypeAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Subclause__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubclauseAccess().getNameClassifierNameParserRuleCall_2_0()); }
		ruleClassifierName
		{ after(grammarAccess.getSubclauseAccess().getNameClassifierNameParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Subclause__Emv3statementAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubclauseAccess().getEmv3statementErrorPropagationParserRuleCall_4_0()); }
		ruleErrorPropagation
		{ after(grammarAccess.getSubclauseAccess().getEmv3statementErrorPropagationParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorPropagation__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getErrorPropagationAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getErrorPropagationAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorPropagation__TypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getErrorPropagationAccess().getTypeErrorTypeCrossReference_2_0()); }
		(
			{ before(grammarAccess.getErrorPropagationAccess().getTypeErrorTypeIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getErrorPropagationAccess().getTypeErrorTypeIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getErrorPropagationAccess().getTypeErrorTypeCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
