package SimpleConfiguration 

import StandardProperties::*;

	interface receiver  is
		inp: in port ;
		extout: out feature;
		#Period *=> 20 ms;
	end

	interface sender  is
		extin: in feature;
		outp: out port;
	end

	abstract sender.i is
		sub1: abstract sub;
	end

	abstract sender.isubi is
		sub1: abstract sub.i2t;
	end

	configuration sender.sensorconf extends sender.i  
	is
		sub1 => sub.i {#Period => 23;
			t1#Period => 30;
		};
		sub1.p1#Data_Size => 30;
	end

	abstract receiver.i is
		sub2: abstract sub;
	end

	interface sub  is
		p1: in port ;
	end

	thread subsub.i
	end

	abstract sub.i  is
		t1: thread subsub;
	end
	
	abstract sub.i2t extends sub.i is
		t2: thread subsub;
		t1 => subsub.i; 
	end

	thread interface subsub  is
		p1: in port ;
	end

	system interface top is
		eextin : in feature;
		eextout: out feature;
	end

	system top.i  is
		sense: abstract sender; // subcomponent by interface
		sense1 : abstract sender.i; // subcomponent by implementation with a subcomponent by interface
		sense2: abstract sender.i;
		sense21: abstract sender.isubi;
		sense3: abstract sender;
		actuate: abstract receiver {#Period => 23}; // subcomponent by interface
		sense#Period => 33;
		sense2.sub1#Period => 44;
		extconn1: delegate eextin -> sense.extin;
		extconn2: delegate actuate.extout -> eextout ;
	end

	configuration top.topc extends top.i is
		sense => sender.i  { #Period => 34; sub1 => sub.i {#Period => 35; t1#Period => 36;} } ; // configure in implementation and inline configure its subcomponent
		actuate => receiver.i{#Period => 38 }; // configure in implementation
		sense1.sub1 => sub.i ; // Configure in subcomponent of implementation via reach down
		sense21.sub1.t1 => subsub.i ; // Configure in subcomponent of implementation via reach down
		sense2 =>  { sub1 => sub.i2t; }; // Configure in subcomponent of implementation via nesting
		sense3 => sender.sensorconf; // Configure in configuration of implementation that contains configured subcomponent
	end

end