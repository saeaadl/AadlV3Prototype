 package SamplingTasks
   import Sampling::*;

   thread interface  Init_Samples is
     OrigSet: requires in data access Sample_Set;
     SampleSet: requires out data access Sample_Set;
   end

   thread interface  Collect_Samples is
     Input_Sample: in port Sample;
     SampleSet: requires out data access Sample_Set;
   end

   thread interface Distribute_Samples is
     SampleSet: requires in data access Sample_Set;
     UpdatedSamples : out port Sample;
   end

   process interface Sample_Manager is
     Input_Sample: in port Sample;
     External_Samples: requires in data access Sample_Set;
     Result_Sample: out port Sample;
   end

   process Sample_Manager.Slow_Update is
     Samples: data Sample_Set { rw: provides in out data access Sample_Set};
     Init_Samples : thread Init_Samples;
     // the required access is resolved to a subcomponent declaration
     Collect_Samples: thread Collect_Samples;
     Distribute: thread Distribute_Samples;
     ISSSConn: connection Init_Samples.SampleSet -> Samples.rw ;
     ISOSConn: delegate  Init_Samples.OrigSet -> External_Samples; 
     CSSSConn: connection Collect_Samples.SampleSet -> Samples.rw;
     CSISConn: delegate Input_Sample -> Collect_Samples.Input_Sample;
     DSSConn: connection Distribute.SampleSet -> Samples.rw ;
     DUSConn: delegate Distribute.UpdatedSamples -> Result_Sample ;
   end

 end
