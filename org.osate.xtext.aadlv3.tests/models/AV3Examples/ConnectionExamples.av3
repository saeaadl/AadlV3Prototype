package ConnectionExamples is
// connections without and with reach down into is
// shared data component

	type systemstate;
	
	interface actuator is
		mystate: provides in data access systemstate;
		inp: in port;
		fea: feature;
	end;
	interface sensor is
		mystate: requires in data access systemstate;
		outp: out port;
		fea: feature;
	end;
	
	abstract sensor.i is
		sub1: thread sense;
		upmap: connection sub1.p1 -> outp ;
		stateaccess: connection mystate -> sub1.mystate;
	end;
	abstract actuator.i  is
		thestate: data systemstate ;
		sub2: thread actuate;
		downmap: connection inp -> sub2.p1;
//		stateread: connection  mystate -> thestate ; 
//		statewrite: connection sub2.state -> thestate ;
	end;
	
	
	thread interface sense  is
		mystate: requires in data access systemstate;
		p1: out port ;
	end;
	
	thread interface actuate  is
		p1: in port ;
		mystate: requires out data access systemstate;
	end;
	
	system interface conntop is end;
	
	system conntop.i is
		sense: abstract sensor.i;
		actuate: abstract actuator.i;
		hw : system hardwareplatform.impl;
		conn1: connection sense.sub1.p1 -> actuate.sub2.p1;
		stateaccess: connection  actuate.mystate -> sense.mystate ;
//		fconn: connection sense.fea -> actuate.fea;
	end;
	
	bus interface canbus is
	canbusaccess: provides bus access canbus;
	end;
	
	processor interface x86 is
	canbusaccess: requires bus access canbus;
	end;
	
	system interface hardwareplatform is
		canbusaccess: provides bus access canbus;
	end;
	
	system hardwareplatform.impl is
	cpu: processor x86;
	mybus: bus canbus;
	busconn: connection cpu.canbusaccess <-> mybus.canbusaccess;
//	extbusaccess: connection canbusaccess <-> mybus.canbusaccess; 
	end;
	
end;