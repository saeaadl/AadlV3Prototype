package PortConnectionExample is
// connections without and with reach down into is
// shared data component
	import StateTypes::*;
	import ErrorTypes::*;

	type t1;
	
	interface actuator is
		inp: in feature;
		effect: out feature;
		action: flow inp -> sink ;
	end;
	interface sensor is
		outp: out feature;
		fea: feature;
		src: generator;
		reading: flow source src -> outp;
	end;
	
	abstract sensor.i  is
		senset1: thread sense;
		upmap: connection senset1.p1 -> outp;
		reading => flow upmap -> senset1.reading;
	end;
	abstract actuator.i  is
		actt2: thread actuate;
		downmap: connection inp -> actt2.p1;
		effectmap: connection actt2.effect -> effect;
		action=> flow actt2.taction;
	end;
	
	thread interface sense  is
		p1: out feature ;
		reading : flow source p1 -> p1;
	@EM{
		s: state threestate;
		e1: generator (ServiceOmission) ;
		sense2:  flow e1 -> p1 ;
	};
	end;
	
	thread interface actuate  is
		p1: in feature ;
		effect: out feature ;
		taction: flow  p1 -> sink;
	@EM{
		s : state threestate;
		eact1: generator  (ServiceOmission) ;
		actuate1: transition eact1 in (ServiceOmission) -> s = s1 when s in (s0) ;
		actuate2: flow p1 in (ServiceOmission) -> sink when s in (s0);
		actuate3: flow p1 in (ServiceOmission) -> effect=ServiceOmission when s in( s1);
	};
	end;
	
	thread interface filter is
	insignal1 : in feature;
	insignal2 : in feature;
	outsignal : out feature;
	@EM{
		filter2: flow all (insignal1 in (ServiceOmission), insignal2  in (ServiceOmission)) 
		  ->  outsignal=ServiceOmission;
	};
	end;
	
	thread interface compute is
	insignal : in feature;
	outsignal : out feature;
	
	computer3: flow insignal ->  outsignal;
	@EM{
		es: state threestate;
		e1: generator ;
		r1: transition e1 -> es=s1 when es = s0; 
		computer2: flow insignal in (ServiceOmission) ->  outsignal=ServiceOmission when es in (s1);
		r3: flow insignal in (ServiceOmission) -> sink when es in (s0);
	};
	end;
	
	interface control is
	insignal1: in feature;
	insignal2: in feature;
	outaction: out feature;
	processflow: flow insignal1 -> outaction;
	end;
	
	process interface controlProcess extends control 
	is end;
	
	process controlProcess.impl is
		dofilter: thread filter;
		docompute: thread compute;
		extin1: connection insignal1 -> dofilter.insignal1;
		extin2: connection insignal2 -> dofilter.insignal2;
		ftoc: connection dofilter.outsignal -> docompute.insignal;
		extout: connection docompute.outsignal -> outaction ;
	end;
	
	system interface conntop is 
		effect : out feature;
	end;
	
	system conntop.i is
		sense1: abstract sensor.i;
		sense2: abstract sensor.i;
		processing: process controlProcess.impl;
		actuate: abstract actuator.i;
		hw : system hardwareplatform.impl;
		sensetocontrol1: connection sense1.outp -> processing.insignal1;
		sensetocontrol2: connection sense2.outp -> processing.insignal2;
		controltoactuate: connection processing.outaction -> actuate.inp;
		effectprop: connection actuate.effect -> effect;
	@EM{
		effect2:flow actuate.actt2.effect in (ServiceOmission) ->  effect=ServiceOmission;
	};
	end;
	
	bus interface canbus 
	is end;
	
	processor interface x86 is
	canbusaccess: requires bus access canbus;
	end;
	
	system interface hardwareplatform is
		canbusaccess: provides bus access canbus;
	end;
	
	system hardwareplatform.impl is
	cpu: processor x86;
	mybus: bus canbus;
	end;
	
end;