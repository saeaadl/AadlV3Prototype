package PortConnectionExample is
// connections without and with reach down into is
// shared data component
	import StandardProperties::*;
	import StateTypes::*;
	import ErrorTypes::*;

	type t1;
	
	interface actuator is
		inp: in port;
		fea: feature;
		action: flow sink  inp ;
	end;
	interface sensor is
		outp: out port;
		fea: feature;
		reading: flow source outp;
	end;
	
	abstract sensor.i  is
		senset1: thread sense;
		upmap: connection senset1.p1 -> outp;
		reading => flow upmap -> senset1.reading;
	end;
	abstract actuator.i  is
		actt2: thread actuate;
		downmap: connection inp -> actt2.p1;
		action=> flow actt2.taction;
	end;
	
	thread interface sense  is
		p1: out port ;
		reading: flow  source p1;
		#TokenSource => (t1);
	@EM{
		e1: error event ServiceOmission ;
		sense2:  e1 in ServiceOmission ->  p1(ServiceOmission);
	};
	end;
	
	thread interface actuate  is
		p1: in port ;
		effect: out feature ;
		taction: flow  sink p1;
	@EM{
		actuate2:  p1 in ServiceOmission ->  effect(ServiceOmission);
	};
	end;
	
	thread interface filter is
	insignal : in port;
	outsignal : out port;
	filterpath: flow insignal -> outsignal;
	#Period => 20 ;
	@EM{
		filter2: insignal in ServiceOmission ->  outsignal(ServiceOmission);
	};
	end;
	
	thread interface compute is
	insignal : in port;
	outsignal : out port;
	computepath: flow insignal -> outsignal;
//	@BA{
//		f1: insignal -> outsignal; 
//	};
	@EM{
//		use states threestate;
//		e1: error event;
//		r1: s0 -[e1 ]-> s1 {outsignal(ServiceOmission)};
		r2: insignal in ServiceOmission ->  outsignal(ServiceOmission);
//		r3: insignal in ServiceOmission-> ;
	};
	end;
	
	thread interface logger is
	insignal : in port;
	end;
	
	interface control is
	insignal: in port;
	outaction: out port;
	processflow: flow insignal -> outaction;
	end;
	
	process interface controlProcess extends control 
	is end;
	
	process controlProcess.impl is
		dofilter: thread filter;
		docompute: thread compute;
//		dolog: thread logger;
		extin: connection insignal -> dofilter.insignal;
//		login: connection insignal -> dolog.insignal;
		ftoc: connection dofilter.outsignal -> docompute.insignal;
		extout: connection docompute.outsignal -> outaction ;
	end;
	
	system interface conntop is 
		effect : out feature;
	end;
	
	system conntop.i is
		sense: abstract sensor.i;
		processing: process controlProcess.impl;
		actuate: abstract actuator.i;
		hw : system hardwareplatform.impl;
		sensetocontrol: connection sense.outp -> processing.insignal;
		controltoactuate: connection processing.outaction -> actuate.inp;
	@EM{
		filter2: actuate.actt2.effect in ServiceOmission ->  effect(ServiceOmission);
	};
	end;
	
	bus interface canbus 
	is end;
	
	processor interface x86 is
	canbusaccess: requires bus access canbus;
	end;
	
	system interface hardwareplatform is
		canbusaccess: provides bus access canbus;
	end;
	
	system hardwareplatform.impl is
	cpu: processor x86;
	mybus: bus canbus;
	busconn: connection cpu.canbusaccess <-> mybus;
//	extbusaccess: connection canbusaccess <-> mybus;
	end;
	
end;