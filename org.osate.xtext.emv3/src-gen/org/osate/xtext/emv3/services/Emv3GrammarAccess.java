/*
 * generated by Xtext 2.16.0
 */
package org.osate.xtext.emv3.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class Emv3GrammarAccess extends AbstractGrammarElementFinder {
	
	public class PackageEMV3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.xtext.emv3.Emv3.PackageEMV3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEmv3Keyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cElementsSubclauseParserRuleCall_3_0_0 = (RuleCall)cElementsAssignment_3_0.eContents().get(0);
		private final Assignment cElementsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cElementsErrorTypeParserRuleCall_3_1_0 = (RuleCall)cElementsAssignment_3_1.eContents().get(0);
		
		//PackageEMV3 av3::PackageDeclaration:
		//	'package' name=QualifiedName
		//	'emv3' (elements+=Subclause+ | elements+=ErrorType+);
		@Override public ParserRule getRule() { return rule; }
		
		//'package' name=QualifiedName 'emv3' (elements+=Subclause+ | elements+=ErrorType+)
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//'emv3'
		public Keyword getEmv3Keyword_2() { return cEmv3Keyword_2; }
		
		//elements+=Subclause+ | elements+=ErrorType+
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//elements+=Subclause+
		public Assignment getElementsAssignment_3_0() { return cElementsAssignment_3_0; }
		
		//Subclause
		public RuleCall getElementsSubclauseParserRuleCall_3_0_0() { return cElementsSubclauseParserRuleCall_3_0_0; }
		
		//elements+=ErrorType+
		public Assignment getElementsAssignment_3_1() { return cElementsAssignment_3_1; }
		
		//ErrorType
		public RuleCall getElementsErrorTypeParserRuleCall_3_1_0() { return cElementsErrorTypeParserRuleCall_3_1_0; }
	}
	public class ErrorTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.xtext.emv3.Emv3.ErrorType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cErrorTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//ErrorType av3::PackageElement:
		//	{ErrorType} 'Type' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{ErrorType} 'Type' name=ID
		public Group getGroup() { return cGroup; }
		
		//{ErrorType}
		public Action getErrorTypeAction_0() { return cErrorTypeAction_0; }
		
		//'Type'
		public Keyword getTypeKeyword_1() { return cTypeKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class SubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.xtext.emv3.Emv3.Subclause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEmv3SubclauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameClassifierNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEmv3statementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEmv3statementErrorPropagationParserRuleCall_4_0 = (RuleCall)cEmv3statementAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Subclause av3::PackageElement:
		//	{Emv3Subclause} 'for' name=ClassifierName '{'
		//	emv3statement+=ErrorPropagation
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Emv3Subclause} 'for' name=ClassifierName '{' emv3statement+=ErrorPropagation '}'
		public Group getGroup() { return cGroup; }
		
		//{Emv3Subclause}
		public Action getEmv3SubclauseAction_0() { return cEmv3SubclauseAction_0; }
		
		//'for'
		public Keyword getForKeyword_1() { return cForKeyword_1; }
		
		//name=ClassifierName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ClassifierName
		public RuleCall getNameClassifierNameParserRuleCall_2_0() { return cNameClassifierNameParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//emv3statement+=ErrorPropagation
		public Assignment getEmv3statementAssignment_4() { return cEmv3statementAssignment_4; }
		
		//ErrorPropagation
		public RuleCall getEmv3statementErrorPropagationParserRuleCall_4_0() { return cEmv3statementErrorPropagationParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ErrorPropagationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.xtext.emv3.Emv3.ErrorPropagation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cPropagationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeErrorTypeCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeErrorTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeErrorTypeCrossReference_2_0.eContents().get(1);
		
		//ErrorPropagation:
		//	name=ID 'propagation' type=[ErrorType];
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'propagation' type=[ErrorType]
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'propagation'
		public Keyword getPropagationKeyword_1() { return cPropagationKeyword_1; }
		
		//type=[ErrorType]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//[ErrorType]
		public CrossReference getTypeErrorTypeCrossReference_2_0() { return cTypeErrorTypeCrossReference_2_0; }
		
		//ID
		public RuleCall getTypeErrorTypeIDTerminalRuleCall_2_0_1() { return cTypeErrorTypeIDTerminalRuleCall_2_0_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.xtext.emv3.Emv3.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('::' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('::' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('::' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'::'
		public Keyword getColonColonKeyword_1_0() { return cColonColonKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class ClassifierNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osate.xtext.emv3.Emv3.ClassifierName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//ClassifierName:
		//	ID ('.' ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)?
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final PackageEMV3Elements pPackageEMV3;
	private final ErrorTypeElements pErrorType;
	private final SubclauseElements pSubclause;
	private final ErrorPropagationElements pErrorPropagation;
	private final QualifiedNameElements pQualifiedName;
	private final ClassifierNameElements pClassifierName;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public Emv3GrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPackageEMV3 = new PackageEMV3Elements();
		this.pErrorType = new ErrorTypeElements();
		this.pSubclause = new SubclauseElements();
		this.pErrorPropagation = new ErrorPropagationElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pClassifierName = new ClassifierNameElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.osate.xtext.emv3.Emv3".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//PackageEMV3 av3::PackageDeclaration:
	//	'package' name=QualifiedName
	//	'emv3' (elements+=Subclause+ | elements+=ErrorType+);
	public PackageEMV3Elements getPackageEMV3Access() {
		return pPackageEMV3;
	}
	
	public ParserRule getPackageEMV3Rule() {
		return getPackageEMV3Access().getRule();
	}
	
	//ErrorType av3::PackageElement:
	//	{ErrorType} 'Type' name=ID;
	public ErrorTypeElements getErrorTypeAccess() {
		return pErrorType;
	}
	
	public ParserRule getErrorTypeRule() {
		return getErrorTypeAccess().getRule();
	}
	
	//Subclause av3::PackageElement:
	//	{Emv3Subclause} 'for' name=ClassifierName '{'
	//	emv3statement+=ErrorPropagation
	//	'}';
	public SubclauseElements getSubclauseAccess() {
		return pSubclause;
	}
	
	public ParserRule getSubclauseRule() {
		return getSubclauseAccess().getRule();
	}
	
	//ErrorPropagation:
	//	name=ID 'propagation' type=[ErrorType];
	public ErrorPropagationElements getErrorPropagationAccess() {
		return pErrorPropagation;
	}
	
	public ParserRule getErrorPropagationRule() {
		return getErrorPropagationAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('::' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//ClassifierName:
	//	ID ('.' ID)?;
	public ClassifierNameElements getClassifierNameAccess() {
		return pClassifierName;
	}
	
	public ParserRule getClassifierNameRule() {
		return getClassifierNameAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
