/**
 * generated by Xtext 2.16.0
 */
package org.osate.xtext.emv3.emv3.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.osate.aadlv3.aadlv3.impl.PackageElementImpl;

import org.osate.xtext.emv3.emv3.Emv3Package;
import org.osate.xtext.emv3.emv3.Emv3Subclause;
import org.osate.xtext.emv3.emv3.ErrorPropagation;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Subclause</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.osate.xtext.emv3.emv3.impl.Emv3SubclauseImpl#getEmv3statement <em>Emv3statement</em>}</li>
 * </ul>
 *
 * @generated
 */
public class Emv3SubclauseImpl extends PackageElementImpl implements Emv3Subclause
{
  /**
   * The cached value of the '{@link #getEmv3statement() <em>Emv3statement</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEmv3statement()
   * @generated
   * @ordered
   */
  protected EList<ErrorPropagation> emv3statement;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Emv3SubclauseImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return Emv3Package.Literals.EMV3_SUBCLAUSE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ErrorPropagation> getEmv3statement()
  {
    if (emv3statement == null)
    {
      emv3statement = new EObjectContainmentEList<ErrorPropagation>(ErrorPropagation.class, this, Emv3Package.EMV3_SUBCLAUSE__EMV3STATEMENT);
    }
    return emv3statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case Emv3Package.EMV3_SUBCLAUSE__EMV3STATEMENT:
        return ((InternalEList<?>)getEmv3statement()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case Emv3Package.EMV3_SUBCLAUSE__EMV3STATEMENT:
        return getEmv3statement();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case Emv3Package.EMV3_SUBCLAUSE__EMV3STATEMENT:
        getEmv3statement().clear();
        getEmv3statement().addAll((Collection<? extends ErrorPropagation>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case Emv3Package.EMV3_SUBCLAUSE__EMV3STATEMENT:
        getEmv3statement().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case Emv3Package.EMV3_SUBCLAUSE__EMV3STATEMENT:
        return emv3statement != null && !emv3statement.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //Emv3SubclauseImpl
