/**
 * generated by Xtext 2.16.0
 */
package org.osate.xtext.emv3.emv3.impl;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

import org.osate.aadlv3.aadlv3.Aadlv3Package;

import org.osate.xtext.emv3.emv3.Emv3Factory;
import org.osate.xtext.emv3.emv3.Emv3Package;
import org.osate.xtext.emv3.emv3.Emv3Subclause;
import org.osate.xtext.emv3.emv3.ErrorPropagation;
import org.osate.xtext.emv3.emv3.ErrorType;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class Emv3PackageImpl extends EPackageImpl implements Emv3Package
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass errorPropagationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass errorTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass emv3SubclauseEClass = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see org.osate.xtext.emv3.emv3.Emv3Package#eNS_URI
   * @see #init()
   * @generated
   */
  private Emv3PackageImpl()
  {
    super(eNS_URI, Emv3Factory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link Emv3Package#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static Emv3Package init()
  {
    if (isInited) return (Emv3Package)EPackage.Registry.INSTANCE.getEPackage(Emv3Package.eNS_URI);

    // Obtain or create and register package
    Object registeredEmv3Package = EPackage.Registry.INSTANCE.get(eNS_URI);
    Emv3PackageImpl theEmv3Package = registeredEmv3Package instanceof Emv3PackageImpl ? (Emv3PackageImpl)registeredEmv3Package : new Emv3PackageImpl();

    isInited = true;

    // Initialize simple dependencies
    Aadlv3Package.eINSTANCE.eClass();

    // Create package meta-data objects
    theEmv3Package.createPackageContents();

    // Initialize created meta-data
    theEmv3Package.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theEmv3Package.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(Emv3Package.eNS_URI, theEmv3Package);
    return theEmv3Package;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getErrorPropagation()
  {
    return errorPropagationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getErrorPropagation_Name()
  {
    return (EAttribute)errorPropagationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getErrorPropagation_Type()
  {
    return (EReference)errorPropagationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getErrorType()
  {
    return errorTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getEmv3Subclause()
  {
    return emv3SubclauseEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getEmv3Subclause_Emv3statement()
  {
    return (EReference)emv3SubclauseEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Emv3Factory getEmv3Factory()
  {
    return (Emv3Factory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    errorPropagationEClass = createEClass(ERROR_PROPAGATION);
    createEAttribute(errorPropagationEClass, ERROR_PROPAGATION__NAME);
    createEReference(errorPropagationEClass, ERROR_PROPAGATION__TYPE);

    errorTypeEClass = createEClass(ERROR_TYPE);

    emv3SubclauseEClass = createEClass(EMV3_SUBCLAUSE);
    createEReference(emv3SubclauseEClass, EMV3_SUBCLAUSE__EMV3STATEMENT);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Obtain other dependent packages
    Aadlv3Package theAadlv3Package = (Aadlv3Package)EPackage.Registry.INSTANCE.getEPackage(Aadlv3Package.eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    errorTypeEClass.getESuperTypes().add(theAadlv3Package.getPackageElement());
    emv3SubclauseEClass.getESuperTypes().add(theAadlv3Package.getPackageElement());

    // Initialize classes and features; add operations and parameters
    initEClass(errorPropagationEClass, ErrorPropagation.class, "ErrorPropagation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getErrorPropagation_Name(), ecorePackage.getEString(), "name", null, 0, 1, ErrorPropagation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getErrorPropagation_Type(), this.getErrorType(), null, "type", null, 0, 1, ErrorPropagation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(errorTypeEClass, ErrorType.class, "ErrorType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(emv3SubclauseEClass, Emv3Subclause.class, "Emv3Subclause", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getEmv3Subclause_Emv3statement(), this.getErrorPropagation(), null, "emv3statement", null, 0, -1, Emv3Subclause.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Create resource
    createResource(eNS_URI);
  }

} //Emv3PackageImpl
