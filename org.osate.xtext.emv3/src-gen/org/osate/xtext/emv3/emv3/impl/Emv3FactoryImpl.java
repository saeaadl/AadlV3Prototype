/**
 * generated by Xtext 2.16.0
 */
package org.osate.xtext.emv3.emv3.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.osate.xtext.emv3.emv3.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class Emv3FactoryImpl extends EFactoryImpl implements Emv3Factory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static Emv3Factory init()
  {
    try
    {
      Emv3Factory theEmv3Factory = (Emv3Factory)EPackage.Registry.INSTANCE.getEFactory(Emv3Package.eNS_URI);
      if (theEmv3Factory != null)
      {
        return theEmv3Factory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new Emv3FactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Emv3FactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case Emv3Package.ERROR_PROPAGATION: return createErrorPropagation();
      case Emv3Package.ERROR_TYPE: return createErrorType();
      case Emv3Package.EMV3_SUBCLAUSE: return createEmv3Subclause();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ErrorPropagation createErrorPropagation()
  {
    ErrorPropagationImpl errorPropagation = new ErrorPropagationImpl();
    return errorPropagation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ErrorType createErrorType()
  {
    ErrorTypeImpl errorType = new ErrorTypeImpl();
    return errorType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Emv3Subclause createEmv3Subclause()
  {
    Emv3SubclauseImpl emv3Subclause = new Emv3SubclauseImpl();
    return emv3Subclause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Emv3Package getEmv3Package()
  {
    return (Emv3Package)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static Emv3Package getPackage()
  {
    return Emv3Package.eINSTANCE;
  }

} //Emv3FactoryImpl
