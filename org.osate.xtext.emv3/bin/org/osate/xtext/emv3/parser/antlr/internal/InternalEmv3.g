/*
 * generated by Xtext 2.16.0
 */
grammar InternalEmv3;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.osate.xtext.emv3.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.osate.xtext.emv3.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.osate.xtext.emv3.services.Emv3GrammarAccess;

}

@parser::members {

 	private Emv3GrammarAccess grammarAccess;

    public InternalEmv3Parser(TokenStream input, Emv3GrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "PackageEMV3";
   	}

   	@Override
   	protected Emv3GrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRulePackageEMV3
entryRulePackageEMV3 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPackageEMV3Rule()); }
	iv_rulePackageEMV3=rulePackageEMV3
	{ $current=$iv_rulePackageEMV3.current; }
	EOF;

// Rule PackageEMV3
rulePackageEMV3 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='package'
		{
			newLeafNode(otherlv_0, grammarAccess.getPackageEMV3Access().getPackageKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPackageEMV3Access().getNameQualifiedNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackageEMV3Rule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.osate.xtext.emv3.Emv3.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='emv3'
		{
			newLeafNode(otherlv_2, grammarAccess.getPackageEMV3Access().getEmv3Keyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPackageEMV3Access().getElementsSubclauseParserRuleCall_3_0_0());
					}
					lv_elements_3_0=ruleSubclause
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPackageEMV3Rule());
						}
						add(
							$current,
							"elements",
							lv_elements_3_0,
							"org.osate.xtext.emv3.Emv3.Subclause");
						afterParserOrEnumRuleCall();
					}
				)
			)+
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getPackageEMV3Access().getElementsErrorTypeParserRuleCall_3_1_0());
					}
					lv_elements_4_0=ruleErrorType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPackageEMV3Rule());
						}
						add(
							$current,
							"elements",
							lv_elements_4_0,
							"org.osate.xtext.emv3.Emv3.ErrorType");
						afterParserOrEnumRuleCall();
					}
				)
			)+
		)
	)
;

// Entry rule entryRuleErrorType
entryRuleErrorType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getErrorTypeRule()); }
	iv_ruleErrorType=ruleErrorType
	{ $current=$iv_ruleErrorType.current; }
	EOF;

// Rule ErrorType
ruleErrorType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getErrorTypeAccess().getErrorTypeAction_0(),
					$current);
			}
		)
		otherlv_1='Type'
		{
			newLeafNode(otherlv_1, grammarAccess.getErrorTypeAccess().getTypeKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getErrorTypeAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getErrorTypeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleSubclause
entryRuleSubclause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubclauseRule()); }
	iv_ruleSubclause=ruleSubclause
	{ $current=$iv_ruleSubclause.current; }
	EOF;

// Rule Subclause
ruleSubclause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSubclauseAccess().getEmv3SubclauseAction_0(),
					$current);
			}
		)
		otherlv_1='for'
		{
			newLeafNode(otherlv_1, grammarAccess.getSubclauseAccess().getForKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSubclauseAccess().getNameClassifierNameParserRuleCall_2_0());
				}
				lv_name_2_0=ruleClassifierName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubclauseRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.osate.xtext.emv3.Emv3.ClassifierName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getSubclauseAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSubclauseAccess().getEmv3statementErrorPropagationParserRuleCall_4_0());
				}
				lv_emv3statement_4_0=ruleErrorPropagation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubclauseRule());
					}
					add(
						$current,
						"emv3statement",
						lv_emv3statement_4_0,
						"org.osate.xtext.emv3.Emv3.ErrorPropagation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getSubclauseAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleErrorPropagation
entryRuleErrorPropagation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getErrorPropagationRule()); }
	iv_ruleErrorPropagation=ruleErrorPropagation
	{ $current=$iv_ruleErrorPropagation.current; }
	EOF;

// Rule ErrorPropagation
ruleErrorPropagation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getErrorPropagationAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getErrorPropagationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='propagation'
		{
			newLeafNode(otherlv_1, grammarAccess.getErrorPropagationAccess().getPropagationKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getErrorPropagationRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getErrorPropagationAccess().getTypeErrorTypeCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='::'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getColonColonKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleClassifierName
entryRuleClassifierName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getClassifierNameRule()); }
	iv_ruleClassifierName=ruleClassifierName
	{ $current=$iv_ruleClassifierName.current.getText(); }
	EOF;

// Rule ClassifierName
ruleClassifierName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getClassifierNameAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getClassifierNameAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getClassifierNameAccess().getIDTerminalRuleCall_1_1());
			}
		)?
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
